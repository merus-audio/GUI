//Register bank defines
//Generated from ma12070_register_spec_rev5
//Timestamp : Fri Oct 31 11:07:26 CET 2014

#include <devicecontrol.h>
#include<registerbrowser.h>
unsigned char Reg_bank[127];

int write(int address)
{
    return address;
}

#ifndef REGBANK_DEF_H
#define REGBANK_DEF_H
#define REG_SPEC_DB "ma12070_register_spec_rev5"
#define REG_SPEC_TIMESTAMP "Fri Oct 31 11:07:26 CET 2014"
#define set_bit(addr,bit,value) ::Reg_bank[addr] = ( ::Reg_bank[addr] & ~( 1 << bit ) )  | ( value << bit )
#define PM_min ((::Reg_bank[0] & 0x03) >> 0)
#define s_PM_min(value) ::Reg_bank[0] = (::Reg_bank[0] & 0xfc) | ( value << 0 )
#define w_PM_min write(0)
#define PM_max ((::Reg_bank[0] & 0x0c) >> 2)
#define s_PM_max(value) ::Reg_bank[0] = (::Reg_bank[0] & 0xf3) | ( value << 2 )
#define w_PM_max write(0)
#define PM_man ((::Reg_bank[0] & 0x30) >> 4)
#define s_PM_man(value) ::Reg_bank[0] = (::Reg_bank[0] & 0xcf) | ( value << 4 )
#define w_PM_man write(0)
#define manualPM ((::Reg_bank[0] & 0x40) >> 6)
#define s_manualPM(value) ::Reg_bank[0] = (::Reg_bank[0] & 0xbf) | ( value << 6 )
#define w_manualPM write(0)
#define sw_en_force ((::Reg_bank[0] & 0x80) >> 7)
#define s_sw_en_force(value) ::Reg_bank[0] = (::Reg_bank[0] & 0x7f) | ( value << 7 )
#define w_sw_en_force write(0)
#define Minv_thr_1to2 ((::Reg_bank[1] & 0xff) >> 0)
#define s_Minv_thr_1to2(value) ::Reg_bank[1] = (::Reg_bank[1] & 0x00) | ( value << 0 )
#define w_Minv_thr_1to2 write(1)
#define Minv_thr_2to1 ((::Reg_bank[2] & 0xff) >> 0)
#define s_Minv_thr_2to1(value) ::Reg_bank[2] = (::Reg_bank[2] & 0x00) | ( value << 0 )
#define w_Minv_thr_2to1 write(2)
#define Minv_thr_2to3 ((::Reg_bank[3] & 0xff) >> 0)
#define s_Minv_thr_2to3(value) ::Reg_bank[3] = (::Reg_bank[3] & 0x00) | ( value << 0 )
#define w_Minv_thr_2to3 write(3)
#define Minv_thr_3to2 ((::Reg_bank[4] & 0xff) >> 0)
#define s_Minv_thr_3to2(value) ::Reg_bank[4] = (::Reg_bank[4] & 0x00) | ( value << 0 )
#define w_Minv_thr_3to2 write(4)
#define DPsteps ((::Reg_bank[5] & 0x07) >> 0)
#define s_DPsteps(value) ::Reg_bank[5] = (::Reg_bank[5] & 0xf8) | ( value << 0 )
#define w_DPsteps write(5)
#define debug_gpo ((::Reg_bank[6] & 0xff) >> 0)
#define s_debug_gpo(value) ::Reg_bank[6] = (::Reg_bank[6] & 0x00) | ( value << 0 )
#define w_debug_gpo write(6)
#define remote_nset ((::Reg_bank[7] & 0x0f) >> 0)
#define s_remote_nset(value) ::Reg_bank[7] = (::Reg_bank[7] & 0xf0) | ( value << 0 )
#define w_remote_nset write(7)
#define hvb_uvp_dis ((::Reg_bank[7] & 0x10) >> 4)
#define s_hvb_uvp_dis(value) ::Reg_bank[7] = (::Reg_bank[7] & 0xef) | ( value << 4 )
#define w_hvb_uvp_dis write(7)
#define pvdd_uvlo_dis ((::Reg_bank[7] & 0x20) >> 5)
#define s_pvdd_uvlo_dis(value) ::Reg_bank[7] = (::Reg_bank[7] & 0xdf) | ( value << 5 )
#define w_pvdd_uvlo_dis write(7)
#define dcu0_dis ((::Reg_bank[7] & 0x40) >> 6)
#define s_dcu0_dis(value) ::Reg_bank[7] = (::Reg_bank[7] & 0xbf) | ( value << 6 )
#define w_dcu0_dis write(7)
#define dcu1_dis ((::Reg_bank[7] & 0x80) >> 7)
#define s_dcu1_dis(value) ::Reg_bank[7] = (::Reg_bank[7] & 0x7f) | ( value << 7 )
#define w_dcu1_dis write(7)
#define pwmClkDiv_nom ((::Reg_bank[8] & 0xff) >> 0)
#define s_pwmClkDiv_nom(value) ::Reg_bank[8] = (::Reg_bank[8] & 0x00) | ( value << 0 )
#define w_pwmClkDiv_nom write(8)
#define dpwm_Nhigh ((::Reg_bank[9] & 0xff) >> 0)
#define s_dpwm_Nhigh(value) ::Reg_bank[9] = (::Reg_bank[9] & 0x00) | ( value << 0 )
#define w_dpwm_Nhigh write(9)
#define useDPWM ((::Reg_bank[10] & 0x01) >> 0)
#define s_useDPWM(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xfe) | ( value << 0 )
#define w_useDPWM write(10)
#define ocp_latch_en ((::Reg_bank[10] & 0x02) >> 1)
#define s_ocp_latch_en(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xfd) | ( value << 1 )
#define w_ocp_latch_en write(10)
#define rssMethod ((::Reg_bank[10] & 0x04) >> 2)
#define s_rssMethod(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xfb) | ( value << 2 )
#define w_rssMethod write(10)
#define enableCMctrl ((::Reg_bank[10] & 0x08) >> 3)
#define s_enableCMctrl(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xf7) | ( value << 3 )
#define w_enableCMctrl write(10)
#define pwr_en ((::Reg_bank[10] & 0x10) >> 4)
#define s_pwr_en(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xef) | ( value << 4 )
#define w_pwr_en write(10)
#define use_smart_unmute ((::Reg_bank[10] & 0x20) >> 5)
#define s_use_smart_unmute(value) ::Reg_bank[10] = (::Reg_bank[10] & 0xdf) | ( value << 5 )
#define w_use_smart_unmute write(10)
#define doStretch ((::Reg_bank[11] & 0x10) >> 4)
#define s_doStretch(value) ::Reg_bank[11] = (::Reg_bank[11] & 0xef) | ( value << 4 )
#define w_doStretch write(11)
#define modMode ((::Reg_bank[11] & 0x60) >> 5)
#define s_modMode(value) ::Reg_bank[11] = (::Reg_bank[11] & 0x9f) | ( value << 5 )
#define w_modMode write(11)
#define enableBal ((::Reg_bank[11] & 0x80) >> 7)
#define s_enableBal(value) ::Reg_bank[11] = (::Reg_bank[11] & 0x7f) | ( value << 7 )
#define w_enableBal write(11)
#define mode_itrim ((::Reg_bank[12] & 0x01) >> 0)
#define s_mode_itrim(value) ::Reg_bank[12] = (::Reg_bank[12] & 0xfe) | ( value << 0 )
#define w_mode_itrim write(12)
#define clkDiv_az ((::Reg_bank[13] & 0x1f) >> 0)
#define s_clkDiv_az(value) ::Reg_bank[13] = (::Reg_bank[13] & 0xe0) | ( value << 0 )
#define w_clkDiv_az write(13)
#define calib_start ((::Reg_bank[13] & 0x20) >> 5)
#define s_calib_start(value) ::Reg_bank[13] = (::Reg_bank[13] & 0xdf) | ( value << 5 )
#define w_calib_start write(13)
#define mode_calib ((::Reg_bank[13] & 0x40) >> 6)
#define s_mode_calib(value) ::Reg_bank[13] = (::Reg_bank[13] & 0xbf) | ( value << 6 )
#define w_mode_calib write(13)
#define limitD ((::Reg_bank[13] & 0x80) >> 7)
#define s_limitD(value) ::Reg_bank[13] = (::Reg_bank[13] & 0x7f) | ( value << 7 )
#define w_limitD write(13)
#define debug_sub ((::Reg_bank[15] & 0x0f) >> 0)
#define s_debug_sub(value) ::Reg_bank[15] = (::Reg_bank[15] & 0xf0) | ( value << 0 )
#define w_debug_sub write(15)
#define debug_add ((::Reg_bank[15] & 0xf0) >> 4)
#define s_debug_add(value) ::Reg_bank[15] = (::Reg_bank[15] & 0x0f) | ( value << 4 )
#define w_debug_add write(15)
#define pwmClkHigh ((::Reg_bank[16] & 0x0c) >> 2)
#define s_pwmClkHigh(value) ::Reg_bank[16] = (::Reg_bank[16] & 0xf3) | ( value << 2 )
#define w_pwmClkHigh write(16)
#define pwmLockCount ((::Reg_bank[16] & 0x30) >> 4)
#define s_pwmLockCount(value) ::Reg_bank[16] = (::Reg_bank[16] & 0xcf) | ( value << 4 )
#define w_pwmLockCount write(16)
#define calib_mode ((::Reg_bank[16] & 0xc0) >> 6)
#define s_calib_mode(value) ::Reg_bank[16] = (::Reg_bank[16] & 0x3f) | ( value << 6 )
#define w_calib_mode write(16)
#define PMcfg_norm_BTL__DTsteps ((::Reg_bank[17] & 0x07) >> 0)
#define s_PMcfg_norm_BTL__DTsteps(value) ::Reg_bank[17] = (::Reg_bank[17] & 0xf8) | ( value << 0 )
#define w_PMcfg_norm_BTL__DTsteps write(17)
#define PMcfg_norm_BTL__mod_Iramp ((::Reg_bank[17] & 0x18) >> 3)
#define s_PMcfg_norm_BTL__mod_Iramp(value) ::Reg_bank[17] = (::Reg_bank[17] & 0xe7) | ( value << 3 )
#define w_PMcfg_norm_BTL__mod_Iramp write(17)
#define PMcfg_norm_BTL__freqMode ((::Reg_bank[17] & 0xe0) >> 5)
#define s_PMcfg_norm_BTL__freqMode(value) ::Reg_bank[17] = (::Reg_bank[17] & 0x1f) | ( value << 5 )
#define w_PMcfg_norm_BTL__freqMode write(17)
#define PMcfg_norm_BTL__balType ((::Reg_bank[18] & 0x03) >> 0)
#define s_PMcfg_norm_BTL__balType(value) ::Reg_bank[18] = (::Reg_bank[18] & 0xfc) | ( value << 0 )
#define w_PMcfg_norm_BTL__balType write(18)
#define PMcfg_norm_BTL__modType ((::Reg_bank[18] & 0x0c) >> 2)
#define s_PMcfg_norm_BTL__modType(value) ::Reg_bank[18] = (::Reg_bank[18] & 0xf3) | ( value << 2 )
#define w_PMcfg_norm_BTL__modType write(18)
#define PMcfg_norm_BTL__lf_gain_ol ((::Reg_bank[18] & 0x10) >> 4)
#define s_PMcfg_norm_BTL__lf_gain_ol(value) ::Reg_bank[18] = (::Reg_bank[18] & 0xef) | ( value << 4 )
#define w_PMcfg_norm_BTL__lf_gain_ol write(18)
#define PMcfg_norm_BTL__balWaitCount ((::Reg_bank[19] & 0xff) >> 0)
#define s_PMcfg_norm_BTL__balWaitCount(value) ::Reg_bank[19] = (::Reg_bank[19] & 0x00) | ( value << 0 )
#define w_PMcfg_norm_BTL__balWaitCount write(19)
#define PMcfg_lp_BTL__DTsteps ((::Reg_bank[20] & 0x07) >> 0)
#define s_PMcfg_lp_BTL__DTsteps(value) ::Reg_bank[20] = (::Reg_bank[20] & 0xf8) | ( value << 0 )
#define w_PMcfg_lp_BTL__DTsteps write(20)
#define PMcfg_lp_BTL__mod_Iramp ((::Reg_bank[20] & 0x18) >> 3)
#define s_PMcfg_lp_BTL__mod_Iramp(value) ::Reg_bank[20] = (::Reg_bank[20] & 0xe7) | ( value << 3 )
#define w_PMcfg_lp_BTL__mod_Iramp write(20)
#define PMcfg_lp_BTL__freqMode ((::Reg_bank[20] & 0xe0) >> 5)
#define s_PMcfg_lp_BTL__freqMode(value) ::Reg_bank[20] = (::Reg_bank[20] & 0x1f) | ( value << 5 )
#define w_PMcfg_lp_BTL__freqMode write(20)
#define PMcfg_lp_BTL__balType ((::Reg_bank[21] & 0x03) >> 0)
#define s_PMcfg_lp_BTL__balType(value) ::Reg_bank[21] = (::Reg_bank[21] & 0xfc) | ( value << 0 )
#define w_PMcfg_lp_BTL__balType write(21)
#define PMcfg_lp_BTL__modType ((::Reg_bank[21] & 0x0c) >> 2)
#define s_PMcfg_lp_BTL__modType(value) ::Reg_bank[21] = (::Reg_bank[21] & 0xf3) | ( value << 2 )
#define w_PMcfg_lp_BTL__modType write(21)
#define PMcfg_lp_BTL__lf_gain_ol ((::Reg_bank[21] & 0x10) >> 4)
#define s_PMcfg_lp_BTL__lf_gain_ol(value) ::Reg_bank[21] = (::Reg_bank[21] & 0xef) | ( value << 4 )
#define w_PMcfg_lp_BTL__lf_gain_ol write(21)
#define PMcfg_lp_BTL__balWaitCount ((::Reg_bank[22] & 0xff) >> 0)
#define s_PMcfg_lp_BTL__balWaitCount(value) ::Reg_bank[22] = (::Reg_bank[22] & 0x00) | ( value << 0 )
#define w_PMcfg_lp_BTL__balWaitCount write(22)
#define PMcfg_ulp_BTL__DTsteps ((::Reg_bank[23] & 0x07) >> 0)
#define s_PMcfg_ulp_BTL__DTsteps(value) ::Reg_bank[23] = (::Reg_bank[23] & 0xf8) | ( value << 0 )
#define w_PMcfg_ulp_BTL__DTsteps write(23)
#define PMcfg_ulp_BTL__mod_Iramp ((::Reg_bank[23] & 0x18) >> 3)
#define s_PMcfg_ulp_BTL__mod_Iramp(value) ::Reg_bank[23] = (::Reg_bank[23] & 0xe7) | ( value << 3 )
#define w_PMcfg_ulp_BTL__mod_Iramp write(23)
#define PMcfg_ulp_BTL__freqMode ((::Reg_bank[23] & 0xe0) >> 5)
#define s_PMcfg_ulp_BTL__freqMode(value) ::Reg_bank[23] = (::Reg_bank[23] & 0x1f) | ( value << 5 )
#define w_PMcfg_ulp_BTL__freqMode write(23)
#define PMcfg_ulp_BTL__balType ((::Reg_bank[24] & 0x03) >> 0)
#define s_PMcfg_ulp_BTL__balType(value) ::Reg_bank[24] = (::Reg_bank[24] & 0xfc) | ( value << 0 )
#define w_PMcfg_ulp_BTL__balType write(24)
#define PMcfg_ulp_BTL__modType ((::Reg_bank[24] & 0x0c) >> 2)
#define s_PMcfg_ulp_BTL__modType(value) ::Reg_bank[24] = (::Reg_bank[24] & 0xf3) | ( value << 2 )
#define w_PMcfg_ulp_BTL__modType write(24)
#define PMcfg_ulp_BTL__lf_gain_ol ((::Reg_bank[24] & 0x10) >> 4)
#define s_PMcfg_ulp_BTL__lf_gain_ol(value) ::Reg_bank[24] = (::Reg_bank[24] & 0xef) | ( value << 4 )
#define w_PMcfg_ulp_BTL__lf_gain_ol write(24)
#define PMcfg_ulp_BTL__balWaitCount ((::Reg_bank[25] & 0xff) >> 0)
#define s_PMcfg_ulp_BTL__balWaitCount(value) ::Reg_bank[25] = (::Reg_bank[25] & 0x00) | ( value << 0 )
#define w_PMcfg_ulp_BTL__balWaitCount write(25)
#define PMcfg_norm_SE__DTsteps ((::Reg_bank[26] & 0x07) >> 0)
#define s_PMcfg_norm_SE__DTsteps(value) ::Reg_bank[26] = (::Reg_bank[26] & 0xf8) | ( value << 0 )
#define w_PMcfg_norm_SE__DTsteps write(26)
#define PMcfg_norm_SE__mod_Iramp ((::Reg_bank[26] & 0x18) >> 3)
#define s_PMcfg_norm_SE__mod_Iramp(value) ::Reg_bank[26] = (::Reg_bank[26] & 0xe7) | ( value << 3 )
#define w_PMcfg_norm_SE__mod_Iramp write(26)
#define PMcfg_norm_SE__freqMode ((::Reg_bank[26] & 0xe0) >> 5)
#define s_PMcfg_norm_SE__freqMode(value) ::Reg_bank[26] = (::Reg_bank[26] & 0x1f) | ( value << 5 )
#define w_PMcfg_norm_SE__freqMode write(26)
#define PMcfg_norm_SE__balType ((::Reg_bank[27] & 0x03) >> 0)
#define s_PMcfg_norm_SE__balType(value) ::Reg_bank[27] = (::Reg_bank[27] & 0xfc) | ( value << 0 )
#define w_PMcfg_norm_SE__balType write(27)
#define PMcfg_norm_SE__modType ((::Reg_bank[27] & 0x0c) >> 2)
#define s_PMcfg_norm_SE__modType(value) ::Reg_bank[27] = (::Reg_bank[27] & 0xf3) | ( value << 2 )
#define w_PMcfg_norm_SE__modType write(27)
#define PMcfg_norm_SE__lf_gain_ol ((::Reg_bank[27] & 0x10) >> 4)
#define s_PMcfg_norm_SE__lf_gain_ol(value) ::Reg_bank[27] = (::Reg_bank[27] & 0xef) | ( value << 4 )
#define w_PMcfg_norm_SE__lf_gain_ol write(27)
#define PMcfg_norm_SE__balWaitCount ((::Reg_bank[28] & 0xff) >> 0)
#define s_PMcfg_norm_SE__balWaitCount(value) ::Reg_bank[28] = (::Reg_bank[28] & 0x00) | ( value << 0 )
#define w_PMcfg_norm_SE__balWaitCount write(28)
#define PMcfg_ulp_SE__DTsteps ((::Reg_bank[29] & 0x07) >> 0)
#define s_PMcfg_ulp_SE__DTsteps(value) ::Reg_bank[29] = (::Reg_bank[29] & 0xf8) | ( value << 0 )
#define w_PMcfg_ulp_SE__DTsteps write(29)
#define PMcfg_ulp_SE__mod_Iramp ((::Reg_bank[29] & 0x18) >> 3)
#define s_PMcfg_ulp_SE__mod_Iramp(value) ::Reg_bank[29] = (::Reg_bank[29] & 0xe7) | ( value << 3 )
#define w_PMcfg_ulp_SE__mod_Iramp write(29)
#define PMcfg_ulp_SE__freqMode ((::Reg_bank[29] & 0xe0) >> 5)
#define s_PMcfg_ulp_SE__freqMode(value) ::Reg_bank[29] = (::Reg_bank[29] & 0x1f) | ( value << 5 )
#define w_PMcfg_ulp_SE__freqMode write(29)
#define PMcfg_ulp_SE__balType ((::Reg_bank[30] & 0x03) >> 0)
#define s_PMcfg_ulp_SE__balType(value) ::Reg_bank[30] = (::Reg_bank[30] & 0xfc) | ( value << 0 )
#define w_PMcfg_ulp_SE__balType write(30)
#define PMcfg_ulp_SE__modType ((::Reg_bank[30] & 0x0c) >> 2)
#define s_PMcfg_ulp_SE__modType(value) ::Reg_bank[30] = (::Reg_bank[30] & 0xf3) | ( value << 2 )
#define w_PMcfg_ulp_SE__modType write(30)
#define PMcfg_ulp_SE__lf_gain_ol ((::Reg_bank[30] & 0x10) >> 4)
#define s_PMcfg_ulp_SE__lf_gain_ol(value) ::Reg_bank[30] = (::Reg_bank[30] & 0xef) | ( value << 4 )
#define w_PMcfg_ulp_SE__lf_gain_ol write(30)
#define PMcfg_ulp_SE__balWaitCount ((::Reg_bank[31] & 0xff) >> 0)
#define s_PMcfg_ulp_SE__balWaitCount(value) ::Reg_bank[31] = (::Reg_bank[31] & 0x00) | ( value << 0 )
#define w_PMcfg_ulp_SE__balWaitCount write(31)
#define ctrim_reg ((::Reg_bank[32] & 0x3f) >> 0)
#define s_ctrim_reg(value) ::Reg_bank[32] = (::Reg_bank[32] & 0xc0) | ( value << 0 )
#define w_ctrim_reg write(32)
#define ctrim_ext ((::Reg_bank[32] & 0x40) >> 6)
#define s_ctrim_ext(value) ::Reg_bank[32] = (::Reg_bank[32] & 0xbf) | ( value << 6 )
#define w_ctrim_ext write(32)
#define ocp_latch_clear ((::Reg_bank[32] & 0x80) >> 7)
#define s_ocp_latch_clear(value) ::Reg_bank[32] = (::Reg_bank[32] & 0x7f) | ( value << 7 )
#define w_ocp_latch_clear write(32)
#define ftrim_reg ((::Reg_bank[33] & 0x0f) >> 0)
#define s_ftrim_reg(value) ::Reg_bank[33] = (::Reg_bank[33] & 0xf0) | ( value << 0 )
#define w_ftrim_reg write(33)
#define pll_lock_force ((::Reg_bank[33] & 0x10) >> 4)
#define s_pll_lock_force(value) ::Reg_bank[33] = (::Reg_bank[33] & 0xef) | ( value << 4 )
#define w_pll_lock_force write(33)
#define ftrim_ext ((::Reg_bank[33] & 0x20) >> 5)
#define s_ftrim_ext(value) ::Reg_bank[33] = (::Reg_bank[33] & 0xdf) | ( value << 5 )
#define w_ftrim_ext write(33)
#define ftrim_offset ((::Reg_bank[33] & 0xc0) >> 6)
#define s_ftrim_offset(value) ::Reg_bank[33] = (::Reg_bank[33] & 0x3f) | ( value << 6 )
#define w_ftrim_offset write(33)
#define pll_div_ext ((::Reg_bank[34] & 0x01) >> 0)
#define s_pll_div_ext(value) ::Reg_bank[34] = (::Reg_bank[34] & 0xfe) | ( value << 0 )
#define w_pll_div_ext write(34)
#define pll_div_ref_reg ((::Reg_bank[34] & 0x06) >> 1)
#define s_pll_div_ref_reg(value) ::Reg_bank[34] = (::Reg_bank[34] & 0xf9) | ( value << 1 )
#define w_pll_div_ref_reg write(34)
#define pll_div_fb_reg ((::Reg_bank[34] & 0x08) >> 3)
#define s_pll_div_fb_reg(value) ::Reg_bank[34] = (::Reg_bank[34] & 0xf7) | ( value << 3 )
#define w_pll_div_fb_reg write(34)
#define pll_debug_adr ((::Reg_bank[34] & 0xf0) >> 4)
#define s_pll_debug_adr(value) ::Reg_bank[34] = (::Reg_bank[34] & 0x0f) | ( value << 4 )
#define w_pll_debug_adr write(34)
#define fb_data_in0 ((::Reg_bank[35] & 0x01) >> 0)
#define s_fb_data_in0(value) ::Reg_bank[35] = (::Reg_bank[35] & 0xfe) | ( value << 0 )
#define w_fb_data_in0 write(35)
#define fb_data_in1 ((::Reg_bank[35] & 0x02) >> 1)
#define s_fb_data_in1(value) ::Reg_bank[35] = (::Reg_bank[35] & 0xfd) | ( value << 1 )
#define w_fb_data_in1 write(35)
#define fb_adr ((::Reg_bank[35] & 0xfc) >> 2)
#define s_fb_adr(value) ::Reg_bank[35] = (::Reg_bank[35] & 0x03) | ( value << 2 )
#define w_fb_adr write(35)
#define fb_dm ((::Reg_bank[36] & 0x01) >> 0)
#define s_fb_dm(value) ::Reg_bank[36] = (::Reg_bank[36] & 0xfe) | ( value << 0 )
#define w_fb_dm write(36)
#define fb_pgm_mode ((::Reg_bank[36] & 0x02) >> 1)
#define s_fb_pgm_mode(value) ::Reg_bank[36] = (::Reg_bank[36] & 0xfd) | ( value << 1 )
#define w_fb_pgm_mode write(36)
#define fb_reg_ctrl ((::Reg_bank[36] & 0x10) >> 4)
#define s_fb_reg_ctrl(value) ::Reg_bank[36] = (::Reg_bank[36] & 0xef) | ( value << 4 )
#define w_fb_reg_ctrl write(36)
#define fb_write ((::Reg_bank[36] & 0x20) >> 5)
#define s_fb_write(value) ::Reg_bank[36] = (::Reg_bank[36] & 0xdf) | ( value << 5 )
#define w_fb_write write(36)
#define fb_read ((::Reg_bank[36] & 0x40) >> 6)
#define s_fb_read(value) ::Reg_bank[36] = (::Reg_bank[36] & 0xbf) | ( value << 6 )
#define w_fb_read write(36)
#define itrim_reg ((::Reg_bank[37] & 0x1f) >> 0)
#define s_itrim_reg(value) ::Reg_bank[37] = (::Reg_bank[37] & 0xe0) | ( value << 0 )
#define w_itrim_reg write(37)
#define audio_in_mode ((::Reg_bank[37] & 0xe0) >> 5)
#define s_audio_in_mode(value) ::Reg_bank[37] = (::Reg_bank[37] & 0x1f) | ( value << 5 )
#define w_audio_in_mode write(37)
#define ldo_vtrim_reg ((::Reg_bank[38] & 0x03) >> 0)
#define s_ldo_vtrim_reg(value) ::Reg_bank[38] = (::Reg_bank[38] & 0xfc) | ( value << 0 )
#define w_ldo_vtrim_reg write(38)
#define dp_safe ((::Reg_bank[38] & 0x08) >> 3)
#define s_dp_safe(value) ::Reg_bank[38] = (::Reg_bank[38] & 0xf7) | ( value << 3 )
#define w_dp_safe write(38)
#define hvb_vtrim_reg ((::Reg_bank[38] & 0xf0) >> 4)
#define s_hvb_vtrim_reg(value) ::Reg_bank[38] = (::Reg_bank[38] & 0x0f) | ( value << 4 )
#define w_hvb_vtrim_reg write(38)
#define bg_vtrim_reg ((::Reg_bank[39] & 0x1f) >> 0)
#define s_bg_vtrim_reg(value) ::Reg_bank[39] = (::Reg_bank[39] & 0xe0) | ( value << 0 )
#define w_bg_vtrim_reg write(39)
#define audio_in_mode_ext ((::Reg_bank[39] & 0x20) >> 5)
#define s_audio_in_mode_ext(value) ::Reg_bank[39] = (::Reg_bank[39] & 0xdf) | ( value << 5 )
#define w_audio_in_mode_ext write(39)
#define oc_thr_ext ((::Reg_bank[39] & 0x40) >> 6)
#define s_oc_thr_ext(value) ::Reg_bank[39] = (::Reg_bank[39] & 0xbf) | ( value << 6 )
#define w_oc_thr_ext write(39)
#define oc_blnk_ext ((::Reg_bank[39] & 0x80) >> 7)
#define s_oc_blnk_ext(value) ::Reg_bank[39] = (::Reg_bank[39] & 0x7f) | ( value << 7 )
#define w_oc_blnk_ext write(39)
#define pwm_gain_reg ((::Reg_bank[40] & 0x07) >> 0)
#define s_pwm_gain_reg(value) ::Reg_bank[40] = (::Reg_bank[40] & 0xf8) | ( value << 0 )
#define w_pwm_gain_reg write(40)
#define itrim_ext ((::Reg_bank[40] & 0x08) >> 3)
#define s_itrim_ext(value) ::Reg_bank[40] = (::Reg_bank[40] & 0xf7) | ( value << 3 )
#define w_itrim_ext write(40)
#define bg_vtrim_ext ((::Reg_bank[40] & 0x10) >> 4)
#define s_bg_vtrim_ext(value) ::Reg_bank[40] = (::Reg_bank[40] & 0xef) | ( value << 4 )
#define w_bg_vtrim_ext write(40)
#define ldo_vtrim_ext ((::Reg_bank[40] & 0x20) >> 5)
#define s_ldo_vtrim_ext(value) ::Reg_bank[40] = (::Reg_bank[40] & 0xdf) | ( value << 5 )
#define w_ldo_vtrim_ext write(40)
#define hvb_vtrim_ext ((::Reg_bank[40] & 0x40) >> 6)
#define s_hvb_vtrim_ext(value) ::Reg_bank[40] = (::Reg_bank[40] & 0xbf) | ( value << 6 )
#define w_hvb_vtrim_ext write(40)
#define hvboot_on_force ((::Reg_bank[40] & 0x80) >> 7)
#define s_hvboot_on_force(value) ::Reg_bank[40] = (::Reg_bank[40] & 0x7f) | ( value << 7 )
#define w_hvboot_on_force write(40)
#define oc_lvl1_maxCount ((::Reg_bank[41] & 0x0f) >> 0)
#define s_oc_lvl1_maxCount(value) ::Reg_bank[41] = (::Reg_bank[41] & 0xf0) | ( value << 0 )
#define w_oc_lvl1_maxCount write(41)
#define oc_lvl1_decCountRatio ((::Reg_bank[41] & 0xf0) >> 4)
#define s_oc_lvl1_decCountRatio(value) ::Reg_bank[41] = (::Reg_bank[41] & 0x0f) | ( value << 4 )
#define w_oc_lvl1_decCountRatio write(41)
#define pll_enbits_reg ((::Reg_bank[42] & 0xff) >> 0)
#define s_pll_enbits_reg(value) ::Reg_bank[42] = (::Reg_bank[42] & 0x00) | ( value << 0 )
#define w_pll_enbits_reg write(42)
#define pll_enbits_ext ((::Reg_bank[43] & 0x01) >> 0)
#define s_pll_enbits_ext(value) ::Reg_bank[43] = (::Reg_bank[43] & 0xfe) | ( value << 0 )
#define w_pll_enbits_ext write(43)
#define ocp_lvl1_reaction ((::Reg_bank[43] & 0x06) >> 1)
#define s_ocp_lvl1_reaction(value) ::Reg_bank[43] = (::Reg_bank[43] & 0xf9) | ( value << 1 )
#define w_ocp_lvl1_reaction write(43)
#define ocp_rel_count ((::Reg_bank[43] & 0x38) >> 3)
#define s_ocp_rel_count(value) ::Reg_bank[43] = (::Reg_bank[43] & 0xc7) | ( value << 3 )
#define w_ocp_rel_count write(43)
#define prot_btl_highz_reg ((::Reg_bank[43] & 0x40) >> 6)
#define s_prot_btl_highz_reg(value) ::Reg_bank[43] = (::Reg_bank[43] & 0xbf) | ( value << 6 )
#define w_prot_btl_highz_reg write(43)
#define gd_pu_seq_dis ((::Reg_bank[43] & 0x80) >> 7)
#define s_gd_pu_seq_dis(value) ::Reg_bank[43] = (::Reg_bank[43] & 0x7f) | ( value << 7 )
#define w_gd_pu_seq_dis write(43)
#define startup_stepThr ((::Reg_bank[44] & 0xff) >> 0)
#define s_startup_stepThr(value) ::Reg_bank[44] = (::Reg_bank[44] & 0x00) | ( value << 0 )
#define w_startup_stepThr write(44)
#define eh_mode ((::Reg_bank[45] & 0x03) >> 0)
#define s_eh_mode(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xfc) | ( value << 0 )
#define w_eh_mode write(45)
#define eh_clear ((::Reg_bank[45] & 0x04) >> 2)
#define s_eh_clear(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xfb) | ( value << 2 )
#define w_eh_clear write(45)
#define eh_triggerShdn ((::Reg_bank[45] & 0x08) >> 3)
#define s_eh_triggerShdn(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xf7) | ( value << 3 )
#define w_eh_triggerShdn write(45)
#define eh_otpShdn ((::Reg_bank[45] & 0x10) >> 4)
#define s_eh_otpShdn(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xef) | ( value << 4 )
#define w_eh_otpShdn write(45)
#define thermal_compr_en ((::Reg_bank[45] & 0x20) >> 5)
#define s_thermal_compr_en(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xdf) | ( value << 5 )
#define w_thermal_compr_en write(45)
#define system_mute ((::Reg_bank[45] & 0x40) >> 6)
#define s_system_mute(value) ::Reg_bank[45] = (::Reg_bank[45] & 0xbf) | ( value << 6 )
#define w_system_mute write(45)
#define dp_cont ((::Reg_bank[45] & 0x80) >> 7)
#define s_dp_cont(value) ::Reg_bank[45] = (::Reg_bank[45] & 0x7f) | ( value << 7 )
#define w_dp_cont write(45)
#define thermal_compr_max_db ((::Reg_bank[46] & 0x07) >> 0)
#define s_thermal_compr_max_db(value) ::Reg_bank[46] = (::Reg_bank[46] & 0xf8) | ( value << 0 )
#define w_thermal_compr_max_db write(46)
#define eh_inputCompr_dec ((::Reg_bank[46] & 0x38) >> 3)
#define s_eh_inputCompr_dec(value) ::Reg_bank[46] = (::Reg_bank[46] & 0xc7) | ( value << 3 )
#define w_eh_inputCompr_dec write(46)
#define pwm_gain_ext ((::Reg_bank[46] & 0x40) >> 6)
#define s_pwm_gain_ext(value) ::Reg_bank[46] = (::Reg_bank[46] & 0xbf) | ( value << 6 )
#define w_pwm_gain_ext write(46)
#define oc_bias_high ((::Reg_bank[46] & 0x80) >> 7)
#define s_oc_bias_high(value) ::Reg_bank[46] = (::Reg_bank[46] & 0x7f) | ( value << 7 )
#define w_oc_bias_high write(46)
#define error_trig_mask ((::Reg_bank[47] & 0xff) >> 0)
#define s_error_trig_mask(value) ::Reg_bank[47] = (::Reg_bank[47] & 0x00) | ( value << 0 )
#define w_error_trig_mask write(47)
#define gd_disable ((::Reg_bank[49] & 0xff) >> 0)
#define s_gd_disable(value) ::Reg_bank[49] = (::Reg_bank[49] & 0x00) | ( value << 0 )
#define w_gd_disable write(49)
#define gd_bg_vtrim ((::Reg_bank[50] & 0x03) >> 0)
#define s_gd_bg_vtrim(value) ::Reg_bank[50] = (::Reg_bank[50] & 0xfc) | ( value << 0 )
#define w_gd_bg_vtrim write(50)
#define hvb_uvp_trim_reg ((::Reg_bank[50] & 0x0c) >> 2)
#define s_hvb_uvp_trim_reg(value) ::Reg_bank[50] = (::Reg_bank[50] & 0xf3) | ( value << 2 )
#define w_hvb_uvp_trim_reg write(50)
#define hvb_uvp_trim_ext ((::Reg_bank[50] & 0x10) >> 4)
#define s_hvb_uvp_trim_ext(value) ::Reg_bank[50] = (::Reg_bank[50] & 0xef) | ( value << 4 )
#define w_hvb_uvp_trim_ext write(50)
#define dt_min_reg ((::Reg_bank[50] & 0xe0) >> 5)
#define s_dt_min_reg(value) ::Reg_bank[50] = (::Reg_bank[50] & 0x1f) | ( value << 5 )
#define w_dt_min_reg write(50)
#define oc_blnk_reg ((::Reg_bank[51] & 0x0f) >> 0)
#define s_oc_blnk_reg(value) ::Reg_bank[51] = (::Reg_bank[51] & 0xf0) | ( value << 0 )
#define w_oc_blnk_reg write(51)
#define oc_thr_reg ((::Reg_bank[51] & 0xf0) >> 4)
#define s_oc_thr_reg(value) ::Reg_bank[51] = (::Reg_bank[51] & 0x0f) | ( value << 4 )
#define w_oc_thr_reg write(51)
#define vddf_test_en ((::Reg_bank[52] & 0x01) >> 0)
#define s_vddf_test_en(value) ::Reg_bank[52] = (::Reg_bank[52] & 0xfe) | ( value << 0 )
#define w_vddf_test_en write(52)
#define vddf_test_turnon ((::Reg_bank[52] & 0x02) >> 1)
#define s_vddf_test_turnon(value) ::Reg_bank[52] = (::Reg_bank[52] & 0xfd) | ( value << 1 )
#define w_vddf_test_turnon write(52)
#define vddf_test_add ((::Reg_bank[52] & 0x3c) >> 2)
#define s_vddf_test_add(value) ::Reg_bank[52] = (::Reg_bank[52] & 0xc3) | ( value << 2 )
#define w_vddf_test_add write(52)
#define dt_min_ext ((::Reg_bank[52] & 0x40) >> 6)
#define s_dt_min_ext(value) ::Reg_bank[52] = (::Reg_bank[52] & 0xbf) | ( value << 6 )
#define w_dt_min_ext write(52)
#define gd_pd_strong_reg ((::Reg_bank[52] & 0x80) >> 7)
#define s_gd_pd_strong_reg(value) ::Reg_bank[52] = (::Reg_bank[52] & 0x7f) | ( value << 7 )
#define w_gd_pd_strong_reg write(52)
#define i2s_format ((::Reg_bank[53] & 0x07) >> 0)
#define s_i2s_format(value) ::Reg_bank[53] = (::Reg_bank[53] & 0xf8) | ( value << 0 )
#define w_i2s_format write(53)
#define audio_proc_enable ((::Reg_bank[53] & 0x08) >> 3)
#define s_audio_proc_enable(value) ::Reg_bank[53] = (::Reg_bank[53] & 0xf7) | ( value << 3 )
#define w_audio_proc_enable write(53)
#define audio_proc_release ((::Reg_bank[53] & 0x30) >> 4)
#define s_audio_proc_release(value) ::Reg_bank[53] = (::Reg_bank[53] & 0xcf) | ( value << 4 )
#define w_audio_proc_release write(53)
#define audio_proc_attack ((::Reg_bank[53] & 0xc0) >> 6)
#define s_audio_proc_attack(value) ::Reg_bank[53] = (::Reg_bank[53] & 0x3f) | ( value << 6 )
#define w_audio_proc_attack write(53)
#define i2s_sck_pol ((::Reg_bank[54] & 0x01) >> 0)
#define s_i2s_sck_pol(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xfe) | ( value << 0 )
#define w_i2s_sck_pol write(54)
#define i2s_ws_pol ((::Reg_bank[54] & 0x02) >> 1)
#define s_i2s_ws_pol(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xfd) | ( value << 1 )
#define w_i2s_ws_pol write(54)
#define i2s_order ((::Reg_bank[54] & 0x04) >> 2)
#define s_i2s_order(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xfb) | ( value << 2 )
#define w_i2s_order write(54)
#define i2s_framesize ((::Reg_bank[54] & 0x18) >> 3)
#define s_i2s_framesize(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xe7) | ( value << 3 )
#define w_i2s_framesize write(54)
#define i2s_rightfirst ((::Reg_bank[54] & 0x20) >> 5)
#define s_i2s_rightfirst(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xdf) | ( value << 5 )
#define w_i2s_rightfirst write(54)
#define audio_proc_limiterEnable ((::Reg_bank[54] & 0x40) >> 6)
#define s_audio_proc_limiterEnable(value) ::Reg_bank[54] = (::Reg_bank[54] & 0xbf) | ( value << 6 )
#define w_audio_proc_limiterEnable write(54)
#define audio_proc_mute ((::Reg_bank[54] & 0x80) >> 7)
#define s_audio_proc_mute(value) ::Reg_bank[54] = (::Reg_bank[54] & 0x7f) | ( value << 7 )
#define w_audio_proc_mute write(54)
#define pps_fixthr ((::Reg_bank[55] & 0x0f) >> 0)
#define s_pps_fixthr(value) ::Reg_bank[55] = (::Reg_bank[55] & 0xf0) | ( value << 0 )
#define w_pps_fixthr write(55)
#define pps_adcmode ((::Reg_bank[55] & 0x10) >> 4)
#define s_pps_adcmode(value) ::Reg_bank[55] = (::Reg_bank[55] & 0xef) | ( value << 4 )
#define w_pps_adcmode write(55)
#define pps_disable ((::Reg_bank[55] & 0x20) >> 5)
#define s_pps_disable(value) ::Reg_bank[55] = (::Reg_bank[55] & 0xdf) | ( value << 5 )
#define w_pps_disable write(55)
#define pps_retrigger ((::Reg_bank[55] & 0x40) >> 6)
#define s_pps_retrigger(value) ::Reg_bank[55] = (::Reg_bank[55] & 0xbf) | ( value << 6 )
#define w_pps_retrigger write(55)
#define pps_short_precharge ((::Reg_bank[55] & 0x80) >> 7)
#define s_pps_short_precharge(value) ::Reg_bank[55] = (::Reg_bank[55] & 0x7f) | ( value << 7 )
#define w_pps_short_precharge write(55)
#define dbsw_nFrame ((::Reg_bank[56] & 0x07) >> 0)
#define s_dbsw_nFrame(value) ::Reg_bank[56] = (::Reg_bank[56] & 0xf8) | ( value << 0 )
#define w_dbsw_nFrame write(56)
#define dbsw_addr ((::Reg_bank[56] & 0x18) >> 3)
#define s_dbsw_addr(value) ::Reg_bank[56] = (::Reg_bank[56] & 0xe7) | ( value << 3 )
#define w_dbsw_addr write(56)
#define dbsw_en ((::Reg_bank[56] & 0x40) >> 6)
#define s_dbsw_en(value) ::Reg_bank[56] = (::Reg_bank[56] & 0xbf) | ( value << 6 )
#define w_dbsw_en write(56)
#define sdm_debug_en ((::Reg_bank[56] & 0x80) >> 7)
#define s_sdm_debug_en(value) ::Reg_bank[56] = (::Reg_bank[56] & 0x7f) | ( value << 7 )
#define w_sdm_debug_en write(56)
#define CMctrl_deadband ((::Reg_bank[57] & 0x0f) >> 0)
#define s_CMctrl_deadband(value) ::Reg_bank[57] = (::Reg_bank[57] & 0xf0) | ( value << 0 )
#define w_CMctrl_deadband write(57)
#define clkDiv_sw_cp ((::Reg_bank[58] & 0x1f) >> 0)
#define s_clkDiv_sw_cp(value) ::Reg_bank[58] = (::Reg_bank[58] & 0xe0) | ( value << 0 )
#define w_clkDiv_sw_cp write(58)
#define dac_mode_rz ((::Reg_bank[58] & 0x20) >> 5)
#define s_dac_mode_rz(value) ::Reg_bank[58] = (::Reg_bank[58] & 0xdf) | ( value << 5 )
#define w_dac_mode_rz write(58)
#define cmrr_trim_ext ((::Reg_bank[58] & 0x40) >> 6)
#define s_cmrr_trim_ext(value) ::Reg_bank[58] = (::Reg_bank[58] & 0xbf) | ( value << 6 )
#define w_cmrr_trim_ext write(58)
#define use_int_dac_clk_reg ((::Reg_bank[58] & 0x80) >> 7)
#define s_use_int_dac_clk_reg(value) ::Reg_bank[58] = (::Reg_bank[58] & 0x7f) | ( value << 7 )
#define w_use_int_dac_clk_reg write(58)
#define cmrr_trim0_reg ((::Reg_bank[59] & 0x1f) >> 0)
#define s_cmrr_trim0_reg(value) ::Reg_bank[59] = (::Reg_bank[59] & 0xe0) | ( value << 0 )
#define w_cmrr_trim0_reg write(59)
#define cmrr_trim1_reg ((::Reg_bank[60] & 0x1f) >> 0)
#define s_cmrr_trim1_reg(value) ::Reg_bank[60] = (::Reg_bank[60] & 0xe0) | ( value << 0 )
#define w_cmrr_trim1_reg write(60)
#define bg_itrim_reg ((::Reg_bank[61] & 0x1f) >> 0)
#define s_bg_itrim_reg(value) ::Reg_bank[61] = (::Reg_bank[61] & 0xe0) | ( value << 0 )
#define w_bg_itrim_reg write(61)
#define bg_itrim_ext ((::Reg_bank[61] & 0x20) >> 5)
#define s_bg_itrim_ext(value) ::Reg_bank[61] = (::Reg_bank[61] & 0xdf) | ( value << 5 )
#define w_bg_itrim_ext write(61)
#define sif_mode_i2c_reg ((::Reg_bank[61] & 0x40) >> 6)
#define s_sif_mode_i2c_reg(value) ::Reg_bank[61] = (::Reg_bank[61] & 0xbf) | ( value << 6 )
#define w_sif_mode_i2c_reg write(61)
#define sif_mode_i2c_ext ((::Reg_bank[61] & 0x80) >> 7)
#define s_sif_mode_i2c_ext(value) ::Reg_bank[61] = (::Reg_bank[61] & 0x7f) | ( value << 7 )
#define w_sif_mode_i2c_ext write(61)
#define vol_db_master ((::Reg_bank[64] & 0xff) >> 0)
#define s_vol_db_master(value) ::Reg_bank[64] = (::Reg_bank[64] & 0x00) | ( value << 0 )
#define w_vol_db_master write(64)
#define vol_lsb_master ((::Reg_bank[65] & 0x03) >> 0)
#define s_vol_lsb_master(value) ::Reg_bank[65] = (::Reg_bank[65] & 0xfc) | ( value << 0 )
#define w_vol_lsb_master write(65)
#define vol_db_ch0 ((::Reg_bank[66] & 0xff) >> 0)
#define s_vol_db_ch0(value) ::Reg_bank[66] = (::Reg_bank[66] & 0x00) | ( value << 0 )
#define w_vol_db_ch0 write(66)
#define vol_db_ch1 ((::Reg_bank[67] & 0xff) >> 0)
#define s_vol_db_ch1(value) ::Reg_bank[67] = (::Reg_bank[67] & 0x00) | ( value << 0 )
#define w_vol_db_ch1 write(67)
#define vol_db_ch2 ((::Reg_bank[68] & 0xff) >> 0)
#define s_vol_db_ch2(value) ::Reg_bank[68] = (::Reg_bank[68] & 0x00) | ( value << 0 )
#define w_vol_db_ch2 write(68)
#define vol_db_ch3 ((::Reg_bank[69] & 0xff) >> 0)
#define s_vol_db_ch3(value) ::Reg_bank[69] = (::Reg_bank[69] & 0x00) | ( value << 0 )
#define w_vol_db_ch3 write(69)
#define vol_lsb_ch0 ((::Reg_bank[70] & 0x03) >> 0)
#define s_vol_lsb_ch0(value) ::Reg_bank[70] = (::Reg_bank[70] & 0xfc) | ( value << 0 )
#define w_vol_lsb_ch0 write(70)
#define vol_lsb_ch1 ((::Reg_bank[70] & 0x0c) >> 2)
#define s_vol_lsb_ch1(value) ::Reg_bank[70] = (::Reg_bank[70] & 0xf3) | ( value << 2 )
#define w_vol_lsb_ch1 write(70)
#define vol_lsb_ch2 ((::Reg_bank[70] & 0x30) >> 4)
#define s_vol_lsb_ch2(value) ::Reg_bank[70] = (::Reg_bank[70] & 0xcf) | ( value << 4 )
#define w_vol_lsb_ch2 write(70)
#define vol_lsb_ch3 ((::Reg_bank[70] & 0xc0) >> 6)
#define s_vol_lsb_ch3(value) ::Reg_bank[70] = (::Reg_bank[70] & 0x3f) | ( value << 6 )
#define w_vol_lsb_ch3 write(70)
#define thr_db_ch0 ((::Reg_bank[71] & 0xff) >> 0)
#define s_thr_db_ch0(value) ::Reg_bank[71] = (::Reg_bank[71] & 0x00) | ( value << 0 )
#define w_thr_db_ch0 write(71)
#define thr_db_ch1 ((::Reg_bank[72] & 0xff) >> 0)
#define s_thr_db_ch1(value) ::Reg_bank[72] = (::Reg_bank[72] & 0x00) | ( value << 0 )
#define w_thr_db_ch1 write(72)
#define thr_db_ch2 ((::Reg_bank[73] & 0xff) >> 0)
#define s_thr_db_ch2(value) ::Reg_bank[73] = (::Reg_bank[73] & 0x00) | ( value << 0 )
#define w_thr_db_ch2 write(73)
#define thr_db_ch3 ((::Reg_bank[74] & 0xff) >> 0)
#define s_thr_db_ch3(value) ::Reg_bank[74] = (::Reg_bank[74] & 0x00) | ( value << 0 )
#define w_thr_db_ch3 write(74)
#define thr_lsb_ch0 ((::Reg_bank[75] & 0x03) >> 0)
#define s_thr_lsb_ch0(value) ::Reg_bank[75] = (::Reg_bank[75] & 0xfc) | ( value << 0 )
#define w_thr_lsb_ch0 write(75)
#define thr_lsb_ch1 ((::Reg_bank[75] & 0x0c) >> 2)
#define s_thr_lsb_ch1(value) ::Reg_bank[75] = (::Reg_bank[75] & 0xf3) | ( value << 2 )
#define w_thr_lsb_ch1 write(75)
#define thr_lsb_ch2 ((::Reg_bank[75] & 0x30) >> 4)
#define s_thr_lsb_ch2(value) ::Reg_bank[75] = (::Reg_bank[75] & 0xcf) | ( value << 4 )
#define w_thr_lsb_ch2 write(75)
#define thr_lsb_ch3 ((::Reg_bank[75] & 0xc0) >> 6)
#define s_thr_lsb_ch3(value) ::Reg_bank[75] = (::Reg_bank[75] & 0x3f) | ( value << 6 )
#define w_thr_lsb_ch3 write(75)
#define ilm_offCountThr_reg ((::Reg_bank[76] & 0x07) >> 0)
#define s_ilm_offCountThr_reg(value) ::Reg_bank[76] = (::Reg_bank[76] & 0xf8) | ( value << 0 )
#define w_ilm_offCountThr_reg write(76)
#define ilm_offCountThr_ext ((::Reg_bank[76] & 0x08) >> 3)
#define s_ilm_offCountThr_ext(value) ::Reg_bank[76] = (::Reg_bank[76] & 0xf7) | ( value << 3 )
#define w_ilm_offCountThr_ext write(76)
#define ilm_measDelayCountThr_reg ((::Reg_bank[76] & 0x70) >> 4)
#define s_ilm_measDelayCountThr_reg(value) ::Reg_bank[76] = (::Reg_bank[76] & 0x8f) | ( value << 4 )
#define w_ilm_measDelayCountThr_reg write(76)
#define ilm_measDelayCountThr_ext ((::Reg_bank[76] & 0x80) >> 7)
#define s_ilm_measDelayCountThr_ext(value) ::Reg_bank[76] = (::Reg_bank[76] & 0x7f) | ( value << 7 )
#define w_ilm_measDelayCountThr_ext write(76)
#define cmrr_ctrim0_reg ((::Reg_bank[77] & 0x1f) >> 0)
#define s_cmrr_ctrim0_reg(value) ::Reg_bank[77] = (::Reg_bank[77] & 0xe0) | ( value << 0 )
#define w_cmrr_ctrim0_reg write(77)
#define cmrr_ctrim1_reg ((::Reg_bank[78] & 0x1f) >> 0)
#define s_cmrr_ctrim1_reg(value) ::Reg_bank[78] = (::Reg_bank[78] & 0xe0) | ( value << 0 )
#define w_cmrr_ctrim1_reg write(78)
#define fb_data_out1 ((::Reg_bank[95] & 0xff) >> 0)
#define s_fb_data_out1(value) ::Reg_bank[95] = (::Reg_bank[95] & 0x00) | ( value << 0 )
#define w_fb_data_out1 write(95)
#define dcu_mon0__PM_mon ((::Reg_bank[96] & 0x03) >> 0)
#define s_dcu_mon0__PM_mon(value) ::Reg_bank[96] = (::Reg_bank[96] & 0xfc) | ( value << 0 )
#define w_dcu_mon0__PM_mon write(96)
#define dcu_mon0__freqMode_mon ((::Reg_bank[96] & 0x70) >> 4)
#define s_dcu_mon0__freqMode_mon(value) ::Reg_bank[96] = (::Reg_bank[96] & 0x8f) | ( value << 4 )
#define w_dcu_mon0__freqMode_mon write(96)
#define dcu_mon0__pps_passed ((::Reg_bank[96] & 0x80) >> 7)
#define s_dcu_mon0__pps_passed(value) ::Reg_bank[96] = (::Reg_bank[96] & 0x7f) | ( value << 7 )
#define w_dcu_mon0__pps_passed write(96)
#define dcu_mon0__OCP_mon ((::Reg_bank[97] & 0x01) >> 0)
#define s_dcu_mon0__OCP_mon(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xfe) | ( value << 0 )
#define w_dcu_mon0__OCP_mon write(97)
#define dcu_mon0__Vcfly1_ok ((::Reg_bank[97] & 0x02) >> 1)
#define s_dcu_mon0__Vcfly1_ok(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xfd) | ( value << 1 )
#define w_dcu_mon0__Vcfly1_ok write(97)
#define dcu_mon0__Vcfly2_ok ((::Reg_bank[97] & 0x04) >> 2)
#define s_dcu_mon0__Vcfly2_ok(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xfb) | ( value << 2 )
#define w_dcu_mon0__Vcfly2_ok write(97)
#define dcu_mon0__pvdd_ok ((::Reg_bank[97] & 0x08) >> 3)
#define s_dcu_mon0__pvdd_ok(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xf7) | ( value << 3 )
#define w_dcu_mon0__pvdd_ok write(97)
#define dcu_mon0__vdd_ok ((::Reg_bank[97] & 0x10) >> 4)
#define s_dcu_mon0__vdd_ok(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xef) | ( value << 4 )
#define w_dcu_mon0__vdd_ok write(97)
#define dcu_mon0__mute ((::Reg_bank[97] & 0x20) >> 5)
#define s_dcu_mon0__mute(value) ::Reg_bank[97] = (::Reg_bank[97] & 0xdf) | ( value << 5 )
#define w_dcu_mon0__mute write(97)
#define dcu_mon0__M_mon ((::Reg_bank[98] & 0xff) >> 0)
#define s_dcu_mon0__M_mon(value) ::Reg_bank[98] = (::Reg_bank[98] & 0x00) | ( value << 0 )
#define w_dcu_mon0__M_mon write(98)
#define dcu_mon1__PM_mon ((::Reg_bank[100] & 0x03) >> 0)
#define s_dcu_mon1__PM_mon(value) ::Reg_bank[100] = (::Reg_bank[100] & 0xfc) | ( value << 0 )
#define w_dcu_mon1__PM_mon write(100)
#define dcu_mon1__freqMode_mon ((::Reg_bank[100] & 0x70) >> 4)
#define s_dcu_mon1__freqMode_mon(value) ::Reg_bank[100] = (::Reg_bank[100] & 0x8f) | ( value << 4 )
#define w_dcu_mon1__freqMode_mon write(100)
#define dcu_mon1__pps_passed ((::Reg_bank[100] & 0x80) >> 7)
#define s_dcu_mon1__pps_passed(value) ::Reg_bank[100] = (::Reg_bank[100] & 0x7f) | ( value << 7 )
#define w_dcu_mon1__pps_passed write(100)
#define dcu_mon1__OCP_mon ((::Reg_bank[101] & 0x01) >> 0)
#define s_dcu_mon1__OCP_mon(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xfe) | ( value << 0 )
#define w_dcu_mon1__OCP_mon write(101)
#define dcu_mon1__Vcfly1_ok ((::Reg_bank[101] & 0x02) >> 1)
#define s_dcu_mon1__Vcfly1_ok(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xfd) | ( value << 1 )
#define w_dcu_mon1__Vcfly1_ok write(101)
#define dcu_mon1__Vcfly2_ok ((::Reg_bank[101] & 0x04) >> 2)
#define s_dcu_mon1__Vcfly2_ok(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xfb) | ( value << 2 )
#define w_dcu_mon1__Vcfly2_ok write(101)
#define dcu_mon1__pvdd_ok ((::Reg_bank[101] & 0x08) >> 3)
#define s_dcu_mon1__pvdd_ok(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xf7) | ( value << 3 )
#define w_dcu_mon1__pvdd_ok write(101)
#define dcu_mon1__vdd_ok ((::Reg_bank[101] & 0x10) >> 4)
#define s_dcu_mon1__vdd_ok(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xef) | ( value << 4 )
#define w_dcu_mon1__vdd_ok write(101)
#define dcu_mon1__mute ((::Reg_bank[101] & 0x20) >> 5)
#define s_dcu_mon1__mute(value) ::Reg_bank[101] = (::Reg_bank[101] & 0xdf) | ( value << 5 )
#define w_dcu_mon1__mute write(101)
#define dcu_mon1__M_mon ((::Reg_bank[102] & 0xff) >> 0)
#define s_dcu_mon1__M_mon(value) ::Reg_bank[102] = (::Reg_bank[102] & 0x00) | ( value << 0 )
#define w_dcu_mon1__M_mon write(102)
#define calib_done ((::Reg_bank[104] & 0x20) >> 5)
#define s_calib_done(value) ::Reg_bank[104] = (::Reg_bank[104] & 0xdf) | ( value << 5 )
#define w_calib_done write(104)
#define dcu_mon0__sw_enable ((::Reg_bank[104] & 0x40) >> 6)
#define s_dcu_mon0__sw_enable(value) ::Reg_bank[104] = (::Reg_bank[104] & 0xbf) | ( value << 6 )
#define w_dcu_mon0__sw_enable write(104)
#define dcu_mon1__sw_enable ((::Reg_bank[104] & 0x80) >> 7)
#define s_dcu_mon1__sw_enable(value) ::Reg_bank[104] = (::Reg_bank[104] & 0x7f) | ( value << 7 )
#define w_dcu_mon1__sw_enable write(104)
#define ftrim ((::Reg_bank[105] & 0x1f) >> 0)
#define s_ftrim(value) ::Reg_bank[105] = (::Reg_bank[105] & 0xe0) | ( value << 0 )
#define w_ftrim write(105)
#define eh_clear_fb ((::Reg_bank[105] & 0x20) >> 5)
#define s_eh_clear_fb(value) ::Reg_bank[105] = (::Reg_bank[105] & 0xdf) | ( value << 5 )
#define w_eh_clear_fb write(105)
#define fb_data_out0 ((::Reg_bank[106] & 0xff) >> 0)
#define s_fb_data_out0(value) ::Reg_bank[106] = (::Reg_bank[106] & 0x00) | ( value << 0 )
#define w_fb_data_out0 write(106)
#define error_trig ((::Reg_bank[107] & 0xff) >> 0)
#define s_error_trig(value) ::Reg_bank[107] = (::Reg_bank[107] & 0x00) | ( value << 0 )
#define w_error_trig write(107)
#define error_acc ((::Reg_bank[108] & 0xff) >> 0)
#define s_error_acc(value) ::Reg_bank[108] = (::Reg_bank[108] & 0x00) | ( value << 0 )
#define w_error_acc write(108)
#define error_trig_oc ((::Reg_bank[110] & 0xff) >> 0)
#define s_error_trig_oc(value) ::Reg_bank[110] = (::Reg_bank[110] & 0x00) | ( value << 0 )
#define w_error_trig_oc write(110)
#define error_trig_vc ((::Reg_bank[111] & 0xff) >> 0)
#define s_error_trig_vc(value) ::Reg_bank[111] = (::Reg_bank[111] & 0x00) | ( value << 0 )
#define w_error_trig_vc write(111)
#define error_acc_oc ((::Reg_bank[112] & 0xff) >> 0)
#define s_error_acc_oc(value) ::Reg_bank[112] = (::Reg_bank[112] & 0x00) | ( value << 0 )
#define w_error_acc_oc write(112)
#define error_acc_vc ((::Reg_bank[113] & 0xff) >> 0)
#define s_error_acc_vc(value) ::Reg_bank[113] = (::Reg_bank[113] & 0x00) | ( value << 0 )
#define w_error_acc_vc write(113)
#define ctrim ((::Reg_bank[114] & 0x3f) >> 0)
#define s_ctrim(value) ::Reg_bank[114] = (::Reg_bank[114] & 0xc0) | ( value << 0 )
#define w_ctrim write(114)
#define i2s_data_rate ((::Reg_bank[116] & 0x03) >> 0)
#define s_i2s_data_rate(value) ::Reg_bank[116] = (::Reg_bank[116] & 0xfc) | ( value << 0 )
#define w_i2s_data_rate write(116)
#define audio_in_mode_mon ((::Reg_bank[116] & 0x1c) >> 2)
#define s_audio_in_mode_mon(value) ::Reg_bank[116] = (::Reg_bank[116] & 0xe3) | ( value << 2 )
#define w_audio_in_mode_mon write(116)
#define msel_mon ((::Reg_bank[117] & 0x07) >> 0)
#define s_msel_mon(value) ::Reg_bank[117] = (::Reg_bank[117] & 0xf8) | ( value << 0 )
#define w_msel_mon write(117)
#define ocp_flag_mon ((::Reg_bank[118] & 0xff) >> 0)
#define s_ocp_flag_mon(value) ::Reg_bank[118] = (::Reg_bank[118] & 0x00) | ( value << 0 )
#define w_ocp_flag_mon write(118)
#define vcfly_flag_mon ((::Reg_bank[119] & 0xff) >> 0)
#define s_vcfly_flag_mon(value) ::Reg_bank[119] = (::Reg_bank[119] & 0x00) | ( value << 0 )
#define w_vcfly_flag_mon write(119)
#define dcu_mon0__pps_adc_code_a ((::Reg_bank[120] & 0x0f) >> 0)
#define s_dcu_mon0__pps_adc_code_a(value) ::Reg_bank[120] = (::Reg_bank[120] & 0xf0) | ( value << 0 )
#define w_dcu_mon0__pps_adc_code_a write(120)
#define dcu_mon0__pps_adc_code_b ((::Reg_bank[120] & 0xf0) >> 4)
#define s_dcu_mon0__pps_adc_code_b(value) ::Reg_bank[120] = (::Reg_bank[120] & 0x0f) | ( value << 4 )
#define w_dcu_mon0__pps_adc_code_b write(120)
#define dcu_mon1__pps_adc_code_a ((::Reg_bank[121] & 0x0f) >> 0)
#define s_dcu_mon1__pps_adc_code_a(value) ::Reg_bank[121] = (::Reg_bank[121] & 0xf0) | ( value << 0 )
#define w_dcu_mon1__pps_adc_code_a write(121)
#define dcu_mon1__pps_adc_code_b ((::Reg_bank[121] & 0xf0) >> 4)
#define s_dcu_mon1__pps_adc_code_b(value) ::Reg_bank[121] = (::Reg_bank[121] & 0x0f) | ( value << 4 )
#define w_dcu_mon1__pps_adc_code_b write(121)
#define dcu_mon0__CMbal_stretch_a ((::Reg_bank[122] & 0x0f) >> 0)
#define s_dcu_mon0__CMbal_stretch_a(value) ::Reg_bank[122] = (::Reg_bank[122] & 0xf0) | ( value << 0 )
#define w_dcu_mon0__CMbal_stretch_a write(122)
#define dcu_mon0__CMbal_stretch_b ((::Reg_bank[122] & 0xf0) >> 4)
#define s_dcu_mon0__CMbal_stretch_b(value) ::Reg_bank[122] = (::Reg_bank[122] & 0x0f) | ( value << 4 )
#define w_dcu_mon0__CMbal_stretch_b write(122)
#define dcu_mon1__CMbal_stretch_a ((::Reg_bank[123] & 0x0f) >> 0)
#define s_dcu_mon1__CMbal_stretch_a(value) ::Reg_bank[123] = (::Reg_bank[123] & 0xf0) | ( value << 0 )
#define w_dcu_mon1__CMbal_stretch_a write(123)
#define dcu_mon1__CMbal_stretch_b ((::Reg_bank[123] & 0xf0) >> 4)
#define s_dcu_mon1__CMbal_stretch_b(value) ::Reg_bank[123] = (::Reg_bank[123] & 0x0f) | ( value << 4 )
#define w_dcu_mon1__CMbal_stretch_b write(123)
#define error ((::Reg_bank[124] & 0xff) >> 0)
#define s_error(value) ::Reg_bank[124] = (::Reg_bank[124] & 0x00) | ( value << 0 )
#define w_error write(124)
#define pps_error ((::Reg_bank[125] & 0x0f) >> 0)
#define s_pps_error(value) ::Reg_bank[125] = (::Reg_bank[125] & 0xf0) | ( value << 0 )
#define w_pps_error write(125)
#define audio_proc_clip_mon ((::Reg_bank[126] & 0x0f) >> 0)
#define s_audio_proc_clip_mon(value) ::Reg_bank[126] = (::Reg_bank[126] & 0xf0) | ( value << 0 )
#define w_audio_proc_clip_mon write(126)
#define audio_proc_limiter_mon ((::Reg_bank[126] & 0xf0) >> 4)
#define s_audio_proc_limiter_mon(value) ::Reg_bank[126] = (::Reg_bank[126] & 0x0f) | ( value << 4 )
#define w_audio_proc_limiter_mon write(126)
#define hw_version ::Reg_bank[127]
#endif // REGBANK_DEF_H

